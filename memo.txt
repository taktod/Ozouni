開発メモ

input pluginとoutput pluginを組み合わせていろんな処理します。(fluentdみたいな勢い)
xuggleによる変換も気が向いたらつくっておきたい

このシステムはredisが必須となります。

input系
RtmpInput:rtmpのデータをシステムに取り込む (aac mp3 nellymoser speex adpcm_swf flv1 vp6 h264)
Red5Input:red5のデータをシステムに取り込む (aac mp3 nellymoser speex adpcm_swf flv1 vp6 h264)
FileInput:ファイルのデータをシステムに取り込み (なんでも)
M3u8Input:m3u8のデータをシステムに取り込む (aac mp3 h264)
StdinFlvInput: flv形式の標準入力データをinput化 (aac mp3 nellymoser speex adpcm_swf flv1 h264)
StdinMkvInput: mkv形式の標準入力データをinput化 (aac mp3 adpcm_ima_wav mjpeg h264)

output系
StdoutFlvOutput: ffmpegとかの変換に回すために標準出力としてframeを吐きます flv (aac mp3 nellymoser speex adpcm_swf flv1 vp6 h264)
IOSLiveTurboOutput: iOSLiveTurbo用の動作 (mjpeg adpcm_ima_wav)
RtmpOutput: rtmpとして再publishします (aac mp3 nellymoser speex adpcm_swf flv1 h264)

library系
OzouniBase: ozouniシステムの根幹用のライブラリ
JedisFrameHandler: redisを媒介にframeデータをやり取りするためのhandler
ServerFrameHandler: tcpサーバーを媒介にframeデータをやり取りするためのhandler

redis経由のデータやりとりはwebsocketのやりとりみたいに応答の数がはっきりしない場合に利用すればよさそう。(接続がredisのみで済む)
server経由のデータやりとりはLAN内フレームデータ共有で利用すればよい。

とりあえず、変換の遅延は知りたい。
ただし、frameにアクセスしたプロセスがframeを再度取り直すという動作は、あまり考慮できない。

どこかにレポートしておくことにして、それを参照していろいろする仕組みをつくっておきたいところ。
・データ共有はserver動作とredisのlist経由と２つつくっておく。
・情報登録はrestAPIで実施するやつとredis経由の２つつくっておきたい。(restはとりあえずなくてもいい)

API経由で取得できる情報は
・このプロセスのuid
・現在の処理フレームの位置(変換の遅延を知るためにほしい)
・プロセスIDやサーバー(問題があるときにkillするため)
・フレームの共有方法レポート(他のプロセスが取得するときにどうすればよいか問い合わせするため)
・最終更新時間(きちんと動作しているかわかるため)
このあたりの情報を共有しておきたいところ。

8/12追記：
workというモジュールをつくりました。
input -> work -> outputという流れ作業になります。(なんかnettyのpipelineっぽい)

とりあえずいまのところつくったのは・・・
rtmp -> frame共有
frame共有 -> 変換 -> frame共有
の２つ。

あとjettyというモジュールも追加しました。
jettyサーバーの動作は、いままでの動作とは違い、1つのjettyのモジュールでいくつかのframe共有からデータを取得してユーザーに応答する形になる予定なので、ちょっと別扱いにしました。
springつかってどうの・・・という形にはならないと思う。
まぁ、このあたりはつくってみてから考えればいいと思う。

